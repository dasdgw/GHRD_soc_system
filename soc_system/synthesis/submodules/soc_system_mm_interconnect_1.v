// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2013.11.17.18:19:04

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		output wire [7:0]  hps_0_f2h_axi_slave_awid,                                          //                                         hps_0_f2h_axi_slave.awid
		output wire [31:0] hps_0_f2h_axi_slave_awaddr,                                        //                                                            .awaddr
		output wire [3:0]  hps_0_f2h_axi_slave_awlen,                                         //                                                            .awlen
		output wire [2:0]  hps_0_f2h_axi_slave_awsize,                                        //                                                            .awsize
		output wire [1:0]  hps_0_f2h_axi_slave_awburst,                                       //                                                            .awburst
		output wire [1:0]  hps_0_f2h_axi_slave_awlock,                                        //                                                            .awlock
		output wire [3:0]  hps_0_f2h_axi_slave_awcache,                                       //                                                            .awcache
		output wire [2:0]  hps_0_f2h_axi_slave_awprot,                                        //                                                            .awprot
		output wire [4:0]  hps_0_f2h_axi_slave_awuser,                                        //                                                            .awuser
		output wire        hps_0_f2h_axi_slave_awvalid,                                       //                                                            .awvalid
		input  wire        hps_0_f2h_axi_slave_awready,                                       //                                                            .awready
		output wire [7:0]  hps_0_f2h_axi_slave_wid,                                           //                                                            .wid
		output wire [31:0] hps_0_f2h_axi_slave_wdata,                                         //                                                            .wdata
		output wire [3:0]  hps_0_f2h_axi_slave_wstrb,                                         //                                                            .wstrb
		output wire        hps_0_f2h_axi_slave_wlast,                                         //                                                            .wlast
		output wire        hps_0_f2h_axi_slave_wvalid,                                        //                                                            .wvalid
		input  wire        hps_0_f2h_axi_slave_wready,                                        //                                                            .wready
		input  wire [7:0]  hps_0_f2h_axi_slave_bid,                                           //                                                            .bid
		input  wire [1:0]  hps_0_f2h_axi_slave_bresp,                                         //                                                            .bresp
		input  wire        hps_0_f2h_axi_slave_bvalid,                                        //                                                            .bvalid
		output wire        hps_0_f2h_axi_slave_bready,                                        //                                                            .bready
		output wire [7:0]  hps_0_f2h_axi_slave_arid,                                          //                                                            .arid
		output wire [31:0] hps_0_f2h_axi_slave_araddr,                                        //                                                            .araddr
		output wire [3:0]  hps_0_f2h_axi_slave_arlen,                                         //                                                            .arlen
		output wire [2:0]  hps_0_f2h_axi_slave_arsize,                                        //                                                            .arsize
		output wire [1:0]  hps_0_f2h_axi_slave_arburst,                                       //                                                            .arburst
		output wire [1:0]  hps_0_f2h_axi_slave_arlock,                                        //                                                            .arlock
		output wire [3:0]  hps_0_f2h_axi_slave_arcache,                                       //                                                            .arcache
		output wire [2:0]  hps_0_f2h_axi_slave_arprot,                                        //                                                            .arprot
		output wire [4:0]  hps_0_f2h_axi_slave_aruser,                                        //                                                            .aruser
		output wire        hps_0_f2h_axi_slave_arvalid,                                       //                                                            .arvalid
		input  wire        hps_0_f2h_axi_slave_arready,                                       //                                                            .arready
		input  wire [7:0]  hps_0_f2h_axi_slave_rid,                                           //                                                            .rid
		input  wire [31:0] hps_0_f2h_axi_slave_rdata,                                         //                                                            .rdata
		input  wire [1:0]  hps_0_f2h_axi_slave_rresp,                                         //                                                            .rresp
		input  wire        hps_0_f2h_axi_slave_rlast,                                         //                                                            .rlast
		input  wire        hps_0_f2h_axi_slave_rvalid,                                        //                                                            .rvalid
		output wire        hps_0_f2h_axi_slave_rready,                                        //                                                            .rready
		input  wire        clk_0_clk_clk,                                                     //                                                   clk_0_clk.clk
		input  wire        hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset,  //  hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire        master_secure_clk_reset_reset_bridge_in_reset_reset,               //               master_secure_clk_reset_reset_bridge_in_reset.reset
		input  wire        master_secure_master_translator_reset_reset_bridge_in_reset_reset, // master_secure_master_translator_reset_reset_bridge_in_reset.reset
		input  wire [31:0] master_secure_master_address,                                      //                                        master_secure_master.address
		output wire        master_secure_master_waitrequest,                                  //                                                            .waitrequest
		input  wire [3:0]  master_secure_master_byteenable,                                   //                                                            .byteenable
		input  wire        master_secure_master_read,                                         //                                                            .read
		output wire [31:0] master_secure_master_readdata,                                     //                                                            .readdata
		output wire        master_secure_master_readdatavalid,                                //                                                            .readdatavalid
		input  wire        master_secure_master_write,                                        //                                                            .write
		input  wire [31:0] master_secure_master_writedata                                     //                                                            .writedata
	);

	wire          master_secure_master_translator_avalon_universal_master_0_waitrequest;            // master_secure_master_translator_avalon_universal_master_0_agent:av_waitrequest -> master_secure_master_translator:uav_waitrequest
	wire    [2:0] master_secure_master_translator_avalon_universal_master_0_burstcount;             // master_secure_master_translator:uav_burstcount -> master_secure_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] master_secure_master_translator_avalon_universal_master_0_writedata;              // master_secure_master_translator:uav_writedata -> master_secure_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] master_secure_master_translator_avalon_universal_master_0_address;                // master_secure_master_translator:uav_address -> master_secure_master_translator_avalon_universal_master_0_agent:av_address
	wire          master_secure_master_translator_avalon_universal_master_0_lock;                   // master_secure_master_translator:uav_lock -> master_secure_master_translator_avalon_universal_master_0_agent:av_lock
	wire          master_secure_master_translator_avalon_universal_master_0_write;                  // master_secure_master_translator:uav_write -> master_secure_master_translator_avalon_universal_master_0_agent:av_write
	wire          master_secure_master_translator_avalon_universal_master_0_read;                   // master_secure_master_translator:uav_read -> master_secure_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] master_secure_master_translator_avalon_universal_master_0_readdata;               // master_secure_master_translator_avalon_universal_master_0_agent:av_readdata -> master_secure_master_translator:uav_readdata
	wire          master_secure_master_translator_avalon_universal_master_0_debugaccess;            // master_secure_master_translator:uav_debugaccess -> master_secure_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] master_secure_master_translator_avalon_universal_master_0_byteenable;             // master_secure_master_translator:uav_byteenable -> master_secure_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          master_secure_master_translator_avalon_universal_master_0_readdatavalid;          // master_secure_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> master_secure_master_translator:uav_readdatavalid
	wire          cmd_xbar_mux_src_endofpacket;                                                     // cmd_xbar_mux:src_endofpacket -> hps_0_f2h_axi_slave_agent:write_cp_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                           // cmd_xbar_mux:src_valid -> hps_0_f2h_axi_slave_agent:write_cp_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                   // cmd_xbar_mux:src_startofpacket -> hps_0_f2h_axi_slave_agent:write_cp_startofpacket
	wire  [115:0] cmd_xbar_mux_src_data;                                                            // cmd_xbar_mux:src_data -> hps_0_f2h_axi_slave_agent:write_cp_data
	wire    [1:0] cmd_xbar_mux_src_channel;                                                         // cmd_xbar_mux:src_channel -> hps_0_f2h_axi_slave_agent:write_cp_channel
	wire          cmd_xbar_mux_src_ready;                                                           // hps_0_f2h_axi_slave_agent:write_cp_ready -> cmd_xbar_mux:src_ready
	wire          cmd_xbar_mux_001_src_endofpacket;                                                 // cmd_xbar_mux_001:src_endofpacket -> hps_0_f2h_axi_slave_agent:read_cp_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                       // cmd_xbar_mux_001:src_valid -> hps_0_f2h_axi_slave_agent:read_cp_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                               // cmd_xbar_mux_001:src_startofpacket -> hps_0_f2h_axi_slave_agent:read_cp_startofpacket
	wire  [115:0] cmd_xbar_mux_001_src_data;                                                        // cmd_xbar_mux_001:src_data -> hps_0_f2h_axi_slave_agent:read_cp_data
	wire    [1:0] cmd_xbar_mux_001_src_channel;                                                     // cmd_xbar_mux_001:src_channel -> hps_0_f2h_axi_slave_agent:read_cp_channel
	wire          cmd_xbar_mux_001_src_ready;                                                       // hps_0_f2h_axi_slave_agent:read_cp_ready -> cmd_xbar_mux_001:src_ready
	wire          master_secure_master_translator_avalon_universal_master_0_agent_cp_endofpacket;   // master_secure_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          master_secure_master_translator_avalon_universal_master_0_agent_cp_valid;         // master_secure_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          master_secure_master_translator_avalon_universal_master_0_agent_cp_startofpacket; // master_secure_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [115:0] master_secure_master_translator_avalon_universal_master_0_agent_cp_data;          // master_secure_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          master_secure_master_translator_avalon_universal_master_0_agent_cp_ready;         // addr_router:sink_ready -> master_secure_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          hps_0_f2h_axi_slave_agent_write_rp_endofpacket;                                   // hps_0_f2h_axi_slave_agent:write_rp_endofpacket -> id_router:sink_endofpacket
	wire          hps_0_f2h_axi_slave_agent_write_rp_valid;                                         // hps_0_f2h_axi_slave_agent:write_rp_valid -> id_router:sink_valid
	wire          hps_0_f2h_axi_slave_agent_write_rp_startofpacket;                                 // hps_0_f2h_axi_slave_agent:write_rp_startofpacket -> id_router:sink_startofpacket
	wire  [115:0] hps_0_f2h_axi_slave_agent_write_rp_data;                                          // hps_0_f2h_axi_slave_agent:write_rp_data -> id_router:sink_data
	wire          hps_0_f2h_axi_slave_agent_write_rp_ready;                                         // id_router:sink_ready -> hps_0_f2h_axi_slave_agent:write_rp_ready
	wire          id_router_src_endofpacket;                                                        // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                              // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                      // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [115:0] id_router_src_data;                                                               // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [1:0] id_router_src_channel;                                                            // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                              // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          hps_0_f2h_axi_slave_agent_read_rp_endofpacket;                                    // hps_0_f2h_axi_slave_agent:read_rp_endofpacket -> id_router_001:sink_endofpacket
	wire          hps_0_f2h_axi_slave_agent_read_rp_valid;                                          // hps_0_f2h_axi_slave_agent:read_rp_valid -> id_router_001:sink_valid
	wire          hps_0_f2h_axi_slave_agent_read_rp_startofpacket;                                  // hps_0_f2h_axi_slave_agent:read_rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [115:0] hps_0_f2h_axi_slave_agent_read_rp_data;                                           // hps_0_f2h_axi_slave_agent:read_rp_data -> id_router_001:sink_data
	wire          hps_0_f2h_axi_slave_agent_read_rp_ready;                                          // id_router_001:sink_ready -> hps_0_f2h_axi_slave_agent:read_rp_ready
	wire          id_router_001_src_endofpacket;                                                    // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                          // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                  // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [115:0] id_router_001_src_data;                                                           // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [1:0] id_router_001_src_channel;                                                        // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                          // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          addr_router_src_endofpacket;                                                      // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                            // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                    // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [115:0] addr_router_src_data;                                                             // addr_router:src_data -> limiter:cmd_sink_data
	wire    [1:0] addr_router_src_channel;                                                          // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                            // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                      // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                    // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [115:0] limiter_cmd_src_data;                                                             // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire    [1:0] limiter_cmd_src_channel;                                                          // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                            // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                     // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                           // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                   // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [115:0] rsp_xbar_mux_src_data;                                                            // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire    [1:0] rsp_xbar_mux_src_channel;                                                         // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                           // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                      // limiter:rsp_src_endofpacket -> master_secure_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_rsp_src_valid;                                                            // limiter:rsp_src_valid -> master_secure_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_rsp_src_startofpacket;                                                    // limiter:rsp_src_startofpacket -> master_secure_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [115:0] limiter_rsp_src_data;                                                             // limiter:rsp_src_data -> master_secure_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [1:0] limiter_rsp_src_channel;                                                          // limiter:rsp_src_channel -> master_secure_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_rsp_src_ready;                                                            // master_secure_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire          cmd_xbar_demux_src0_endofpacket;                                                  // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                        // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [115:0] cmd_xbar_demux_src0_data;                                                         // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [1:0] cmd_xbar_demux_src0_channel;                                                      // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                        // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                  // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                        // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [115:0] cmd_xbar_demux_src1_data;                                                         // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire    [1:0] cmd_xbar_demux_src1_channel;                                                      // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                        // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                  // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                        // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [115:0] rsp_xbar_demux_src0_data;                                                         // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire    [1:0] rsp_xbar_demux_src0_channel;                                                      // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                        // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                              // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                    // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                            // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [115:0] rsp_xbar_demux_001_src0_data;                                                     // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire    [1:0] rsp_xbar_demux_001_src0_channel;                                                  // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                    // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire    [1:0] limiter_cmd_valid_data;                                                           // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) master_secure_master_translator (
		.clk                      (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                    (master_secure_master_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (master_secure_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (master_secure_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (master_secure_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (master_secure_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (master_secure_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (master_secure_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (master_secure_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (master_secure_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (master_secure_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (master_secure_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (master_secure_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (master_secure_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (master_secure_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (master_secure_master_byteenable),                                         //                          .byteenable
		.av_read                  (master_secure_master_read),                                               //                          .read
		.av_readdata              (master_secure_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (master_secure_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (master_secure_master_write),                                              //                          .write
		.av_writedata             (master_secure_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                    //               (terminated)
		.av_lock                  (1'b0),                                                                    //               (terminated)
		.av_debugaccess           (1'b0),                                                                    //               (terminated)
		.uav_clken                (),                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                   //               (terminated)
		.av_response              (),                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                         //               (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BEGIN_BURST           (99),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) master_secure_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                   (master_secure_master_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address              (master_secure_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (master_secure_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (master_secure_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (master_secure_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (master_secure_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (master_secure_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (master_secure_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (master_secure_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (master_secure_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (master_secure_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (master_secure_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (master_secure_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (master_secure_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (master_secure_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (master_secure_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (master_secure_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                            //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                             //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                          //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                      //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                            //          .ready
		.av_response             (),                                                                                 // (terminated)
		.av_writeresponserequest (1'b0),                                                                             // (terminated)
		.av_writeresponsevalid   ()                                                                                  // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (100),
		.PKT_QOS_L                   (100),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (103),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (99),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (98),
		.PKT_DATA_SIDEBAND_L         (98),
		.PKT_ADDR_SIDEBAND_H         (97),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (81),
		.PKT_BYTE_CNT_H              (80),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (101),
		.PKT_SRC_ID_L                (101),
		.PKT_DEST_ID_H               (102),
		.PKT_DEST_ID_L               (102),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (8),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8)
	) hps_0_f2h_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                     //        clock_sink.clk
		.aresetn                (~hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (cmd_xbar_mux_001_src_valid),                                        //           read_cp.valid
		.read_cp_ready          (cmd_xbar_mux_001_src_ready),                                        //                  .ready
		.read_cp_data           (cmd_xbar_mux_001_src_data),                                         //                  .data
		.read_cp_channel        (cmd_xbar_mux_001_src_channel),                                      //                  .channel
		.read_cp_startofpacket  (cmd_xbar_mux_001_src_startofpacket),                                //                  .startofpacket
		.read_cp_endofpacket    (cmd_xbar_mux_001_src_endofpacket),                                  //                  .endofpacket
		.write_cp_ready         (cmd_xbar_mux_src_ready),                                            //          write_cp.ready
		.write_cp_valid         (cmd_xbar_mux_src_valid),                                            //                  .valid
		.write_cp_data          (cmd_xbar_mux_src_data),                                             //                  .data
		.write_cp_channel       (cmd_xbar_mux_src_channel),                                          //                  .channel
		.write_cp_startofpacket (cmd_xbar_mux_src_startofpacket),                                    //                  .startofpacket
		.write_cp_endofpacket   (cmd_xbar_mux_src_endofpacket),                                      //                  .endofpacket
		.read_rp_ready          (hps_0_f2h_axi_slave_agent_read_rp_ready),                           //           read_rp.ready
		.read_rp_valid          (hps_0_f2h_axi_slave_agent_read_rp_valid),                           //                  .valid
		.read_rp_data           (hps_0_f2h_axi_slave_agent_read_rp_data),                            //                  .data
		.read_rp_startofpacket  (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                   //                  .startofpacket
		.read_rp_endofpacket    (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                     //                  .endofpacket
		.write_rp_ready         (hps_0_f2h_axi_slave_agent_write_rp_ready),                          //          write_rp.ready
		.write_rp_valid         (hps_0_f2h_axi_slave_agent_write_rp_valid),                          //                  .valid
		.write_rp_data          (hps_0_f2h_axi_slave_agent_write_rp_data),                           //                  .data
		.write_rp_startofpacket (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                  //                  .startofpacket
		.write_rp_endofpacket   (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                    //                  .endofpacket
		.awid                   (hps_0_f2h_axi_slave_awid),                                          // altera_axi_master.awid
		.awaddr                 (hps_0_f2h_axi_slave_awaddr),                                        //                  .awaddr
		.awlen                  (hps_0_f2h_axi_slave_awlen),                                         //                  .awlen
		.awsize                 (hps_0_f2h_axi_slave_awsize),                                        //                  .awsize
		.awburst                (hps_0_f2h_axi_slave_awburst),                                       //                  .awburst
		.awlock                 (hps_0_f2h_axi_slave_awlock),                                        //                  .awlock
		.awcache                (hps_0_f2h_axi_slave_awcache),                                       //                  .awcache
		.awprot                 (hps_0_f2h_axi_slave_awprot),                                        //                  .awprot
		.awuser                 (hps_0_f2h_axi_slave_awuser),                                        //                  .awuser
		.awvalid                (hps_0_f2h_axi_slave_awvalid),                                       //                  .awvalid
		.awready                (hps_0_f2h_axi_slave_awready),                                       //                  .awready
		.wid                    (hps_0_f2h_axi_slave_wid),                                           //                  .wid
		.wdata                  (hps_0_f2h_axi_slave_wdata),                                         //                  .wdata
		.wstrb                  (hps_0_f2h_axi_slave_wstrb),                                         //                  .wstrb
		.wlast                  (hps_0_f2h_axi_slave_wlast),                                         //                  .wlast
		.wvalid                 (hps_0_f2h_axi_slave_wvalid),                                        //                  .wvalid
		.wready                 (hps_0_f2h_axi_slave_wready),                                        //                  .wready
		.bid                    (hps_0_f2h_axi_slave_bid),                                           //                  .bid
		.bresp                  (hps_0_f2h_axi_slave_bresp),                                         //                  .bresp
		.bvalid                 (hps_0_f2h_axi_slave_bvalid),                                        //                  .bvalid
		.bready                 (hps_0_f2h_axi_slave_bready),                                        //                  .bready
		.arid                   (hps_0_f2h_axi_slave_arid),                                          //                  .arid
		.araddr                 (hps_0_f2h_axi_slave_araddr),                                        //                  .araddr
		.arlen                  (hps_0_f2h_axi_slave_arlen),                                         //                  .arlen
		.arsize                 (hps_0_f2h_axi_slave_arsize),                                        //                  .arsize
		.arburst                (hps_0_f2h_axi_slave_arburst),                                       //                  .arburst
		.arlock                 (hps_0_f2h_axi_slave_arlock),                                        //                  .arlock
		.arcache                (hps_0_f2h_axi_slave_arcache),                                       //                  .arcache
		.arprot                 (hps_0_f2h_axi_slave_arprot),                                        //                  .arprot
		.aruser                 (hps_0_f2h_axi_slave_aruser),                                        //                  .aruser
		.arvalid                (hps_0_f2h_axi_slave_arvalid),                                       //                  .arvalid
		.arready                (hps_0_f2h_axi_slave_arready),                                       //                  .arready
		.rid                    (hps_0_f2h_axi_slave_rid),                                           //                  .rid
		.rdata                  (hps_0_f2h_axi_slave_rdata),                                         //                  .rdata
		.rresp                  (hps_0_f2h_axi_slave_rresp),                                         //                  .rresp
		.rlast                  (hps_0_f2h_axi_slave_rlast),                                         //                  .rlast
		.rvalid                 (hps_0_f2h_axi_slave_rvalid),                                        //                  .rvalid
		.rready                 (hps_0_f2h_axi_slave_rready)                                         //                  .rready
	);

	soc_system_mm_interconnect_1_addr_router addr_router (
		.sink_ready         (master_secure_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (master_secure_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (master_secure_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (master_secure_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (master_secure_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                    //       clk.clk
		.reset              (master_secure_master_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                            //       src.ready
		.src_valid          (addr_router_src_valid),                                                            //          .valid
		.src_data           (addr_router_src_data),                                                             //          .data
		.src_channel        (addr_router_src_channel),                                                          //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_id_router id_router (
		.sink_ready         (hps_0_f2h_axi_slave_agent_write_rp_ready),                         //      sink.ready
		.sink_valid         (hps_0_f2h_axi_slave_agent_write_rp_valid),                         //          .valid
		.sink_data          (hps_0_f2h_axi_slave_agent_write_rp_data),                          //          .data
		.sink_startofpacket (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (id_router_src_ready),                                              //       src.ready
		.src_valid          (id_router_src_valid),                                              //          .valid
		.src_data           (id_router_src_data),                                               //          .data
		.src_channel        (id_router_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_1_id_router id_router_001 (
		.sink_ready         (hps_0_f2h_axi_slave_agent_read_rp_ready),                          //      sink.ready
		.sink_valid         (hps_0_f2h_axi_slave_agent_read_rp_valid),                          //          .valid
		.sink_data          (hps_0_f2h_axi_slave_agent_read_rp_data),                           //          .data
		.sink_startofpacket (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                          //       src.ready
		.src_valid          (id_router_001_src_valid),                                          //          .valid
		.src_data           (id_router_001_src_data),                                           //          .data
		.src_channel        (id_router_001_src_channel),                                        //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (clk_0_clk_clk),                                                     //       clk.clk
		.reset                  (master_secure_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                                             //          .valid
		.cmd_sink_data          (addr_router_src_data),                                              //          .data
		.cmd_sink_channel       (addr_router_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                                             //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                              //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                                           //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                                     //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                                       //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                                             //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                                             //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                              //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                                           //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                                     //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                                       //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                                             // cmd_valid.data
	);

	soc_system_mm_interconnect_1_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_0_clk_clk),                                                     //        clk.clk
		.reset              (master_secure_master_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                                             //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                                           //           .channel
		.sink_data          (limiter_cmd_src_data),                                              //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),                                     //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),                                       //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                                            // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                                         //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                                          //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                                         //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                                          //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                                           //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                                           //          .valid
		.src_data            (cmd_xbar_mux_src_data),                                            //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                                        //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                                      //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                                         //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                                       //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                                       //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                                        //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                                        //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                                      //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                                         //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                                              //      sink.ready
		.sink_channel       (id_router_src_channel),                                            //          .channel
		.sink_data          (id_router_src_data),                                               //          .data
		.sink_startofpacket (id_router_src_startofpacket),                                      //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                                        //          .endofpacket
		.sink_valid         (id_router_src_valid),                                              //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                                        //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                                         //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                                          //      sink.ready
		.sink_channel       (id_router_001_src_channel),                                        //          .channel
		.sink_data          (id_router_001_src_data),                                           //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                                          //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                                    //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                                     //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_0_clk_clk),                                                     //       clk.clk
		.reset               (master_secure_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                                            //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                                            //          .valid
		.src_data            (rsp_xbar_mux_src_data),                                             //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                                         //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                                         //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                                       //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                                          //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                                   //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                                     //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                                     //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),                                   //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                                      //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)                                //          .endofpacket
	);

endmodule
